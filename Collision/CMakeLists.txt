##########################################################################
# CMakeLists.txt of project Collision
# Author : lzh
# Modifier : lzh
# Description : Instruction file for CMake to generate Makefile.
##########################################################################

# Check CMake version

CMAKE_MINIMUM_REQUIRED(VERSION 2.8.8 FATAL_ERROR)

# Setup project name

PROJECT(COLLISION)

# Setup executable file name

SET(COLLISION_EXE_NAME collision)

# Setup source files list

SET(COLLISION_SRCS collision.cpp display.cpp draw.cpp update.cpp game.cpp global.cpp event.cpp)

# Generate instruction for target in Makefile

ADD_EXECUTABLE(${COLLISION_EXE_NAME} ${COLLISION_SRCS})

# Setup option list

OPTION(CMAKE_WITH_DEBUG "Generate Makefile in debug mode in cmake" OFF)

OPTION(BUILD_WITH_STATIC "Switch to build statically" OFF)
OPTION(BUILD_WITH_DEBUG "Switch to build in debug mode" OFF)

SET(COLLISION_INCLUDE_DIR "" CACHE STRING "Include directories for the whole project")
SET(COLLISION_LIBRARY_DIR "" CACHE STRING "Library paths for the whole project")

OPTION(HINT_JPEG_FOUND "Switch to hint for libjpeg" OFF)
SET(HINT_JPEG_INCLUDE_DIR "" CACHE STRING "Include directories hinting for libjpeg")
SET(HINT_JPEG_LIBRARY "" CACHE STRING "Library names hinting for libjpeg")

OPTION(HINT_OPENGL_FOUND "Switch to hint for OpenGL" OFF)
SET(HINT_OPENGL_INCLUDE_DIR "" CACHE STRING "Include directories hinting for OpenGL")
SET(HINT_OPENGL_LIBRARY "" CACHE STRING "Library names hinting for OpenGL")

OPTION(HINT_GLU_FOUND "Switch to hint for glu" OFF)
SET(HINT_GLU_INCLUDE_DIR "" CACHE STRING "Include directories hinting for glu")
SET(HINT_GLU_LIBRARY "" CACHE STRING "Library names hinting for glu")

OPTION(HINT_GLFW3_FOUND "Switch to hint for glfw3" OFF)
SET(HINT_GLFW3_INCLUDE_DIR "" CACHE STRING "Include directories hinting for glfw3")
SET(HINT_GLFW3_LIBRARY "" CACHE STRING "Library names hinting for glfw3")

OPTION(HINT_OPENAL_FOUND "Switch to hint for OpenAL" OFF)
SET(HINT_OPENAL_INCLUDE_DIR "" CACHE STRING "Include directories hinting for OpenAL")
SET(HINT_OPENAL_LIBRARY "" CACHE STRING "Library names hinting for OpenAL")

OPTION(HINT_ALUT_FOUND "Switch to hint for alut" OFF)
SET(HINT_ALUT_INCLUDE_DIR "" CACHE STRING "Include directories hinting for alut")
SET(HINT_ALUT_LIBRARY "" CACHE STRING "Library names hinting for alut")

# Setup libraries list

INCLUDE_DIRECTORIES(${COLLISION_INCLUDE_DIR})
LINK_DIRECTORIES(${COLLISION_LIBRARY_DIR})

FIND_PACKAGE(PkgConfig)

TARGET_LINK_LIBRARIES(${COLLISION_EXE_NAME} ${COLLISION_LIBS})

IF (HINT_JPEG_FOUND)
    INCLUDE_DIRECTORIES(${HINT_JPEG_INCLUDE_DIR})
    TARGET_LINK_LIBRARIES(${COLLISION_EXE_NAME} ${HINT_JPEG_LIBRARY})
    IF (CMAKE_WITH_DEBUG)
        MESSAGE(STATUS "libjpeg found by HINT mode.")
    ENDIF ()
ENDIF ()
IF (NOT HINT_JPEG_FOUND AND PKGCONFIG_FOUND)
    PKG_SEARCH_MODULE(PC_JPEG jpeg libjpeg)
    IF ((BUILD_WITH_STATIC STREQUAL "ON") AND PC_JPEG_STATIC_FOUND)
        INCLUDE_DIRECTORIES(${PC_JPEG_STATIC_INCLUDE_DIRS})
        TARGET_LINK_LIBRARIES(${COLLISION_EXE_NAME} ${PC_JPEG_STATIC_LIBRARIES})
        IF (CMAKE_WITH_DEBUG)
            MESSAGE(STATUS "libjpeg found by PC-STATIC mode.")
        ENDIF ()
    ELSEIF (PC_JPEG_FOUND)
        INCLUDE_DIRECTORIES(${PC_JPEG_INCLUDE_DIRS})
        TARGET_LINK_LIBRARIES(${COLLISION_EXE_NAME} ${PC_JPEG_LIBRARIES})
        IF (CMAKE_WITH_DEBUG)
            MESSAGE(STATUS "libjpeg found by PC mode.")
        ENDIF ()
    ENDIF ()
ENDIF ()
IF (NOT HINT_JPEG_FOUND AND NOT PC_JPEG_FOUND)
    FIND_PACKAGE(JPEG)
    IF (JPEG_FOUND)
        INCLUDE_DIRECTORIES(${JPEG_INCLUDE_DIR})
        TARGET_LINK_LIBRARIES(${COLLISION_EXE_NAME} ${JPEG_LIBRARY})
        IF (CMAKE_WITH_DEBUG)
            MESSAGE(STATUS "libjpeg found by CMAKE mode.")
        ENDIF ()
    ENDIF ()
ENDIF ()
IF (NOT HINT_JPEG_FOUND AND NOT JPEG_FOUND AND NOT PC_JPEG_FOUND AND NOT PC_JPEG_STATIC_FOUND)
    MESSAGE(FATAL_ERROR "Cannot find the libjpeg library.")
ENDIF ()

IF (HINT_OPENGL_FOUND)
    INCLUDE_DIRECTORIES(${HINT_OPENGL_INCLUDE_DIR})
    TARGET_LINK_LIBRARIES(${COLLISION_EXE_NAME} ${HINT_OPENGL_LIBRARY})
    IF (CMAKE_WITH_DEBUG)
        MESSAGE(STATUS "OpenGL found by HINT mode.")
    ENDIF ()
ENDIF ()
IF (NOT HINT_OPENGL_FOUND AND PKGCONFIG_FOUND)
    PKG_SEARCH_MODULE(PC_OPENGL OpenGL GL gl opengl32)
    IF ((BUILD_WITH_STATIC STREQUAL "ON") AND PC_OPENGL_STATIC_FOUND)
        INCLUDE_DIRECTORIES(${PC_OPENGL_STATIC_INCLUDE_DIRS})
        TARGET_LINK_LIBRARIES(${COLLISION_EXE_NAME} ${PC_OPENGL_STATIC_LIBRARIES})
        IF (CMAKE_WITH_DEBUG)
            MESSAGE(STATUS "OpenGL found by PC-STATIC mode.")
        ENDIF ()
    ELSEIF (PC_OPENGL_FOUND)
        INCLUDE_DIRECTORIES(${PC_OPENGL_INCLUDE_DIRS})
        TARGET_LINK_LIBRARIES(${COLLISION_EXE_NAME} ${PC_OPENGL_LIBRARIES})
        IF (CMAKE_WITH_DEBUG)
            MESSAGE(STATUS "OpenGL found by PC mode.")
        ENDIF ()
    ENDIF ()
ENDIF ()
IF (NOT HINT_OPENGL_FOUND AND NOT PC_OPENGL_FOUND)
    FIND_PACKAGE(OPENGL)
    IF (OPENGL_FOUND)
        INCLUDE_DIRECTORIES(${OPENGL_INCLUDE_DIR})
        TARGET_LINK_LIBRARIES(${COLLISION_EXE_NAME} ${OPENGL_gl_LIBRARY})
        IF (CMAKE_WITH_DEBUG)
            MESSAGE(STATUS "OpenGL found by CMAKE mode.")
        ENDIF ()
    ENDIF ()
ENDIF ()
IF (NOT HINT_OPENGL_FOUND AND NOT OPENGL_FOUND AND NOT PC_OPENGL_FOUND AND NOT PC_OPENGL_STATIC_FOUND)
    MESSAGE(FATAL_ERROR "Cannot find the OpenGL library.")
ENDIF ()

IF (HINT_GLU_FOUND)
    INCLUDE_DIRECTORIES(${HINT_GLU_INCLUDE_DIR})
    TARGET_LINK_LIBRARIES(${COLLISION_EXE_NAME} ${HINT_GLU_LIBRARY})
    IF (CMAKE_WITH_DEBUG)
        MESSAGE(STATUS "glu found by HINT mode.")
    ENDIF ()
ENDIF ()
IF (NOT HINT_GLU_FOUND AND OPENGL_GLU_FOUND)
    INCLUDE_DIRECTORIES(${OPENGL_glu_INCLUDE_DIR})
    TARGET_LINK_LIBRARIES(${COLLISION_EXE_NAME} ${OPENGL_glu_LIBRARY})
    IF (CMAKE_WITH_DEBUG)
        MESSAGE(STATUS "glu found by OpenGL-glu mode.")
    ENDIF ()
ENDIF ()
IF (NOT HINT_GLU_FOUND AND NOT OPENGL_GLU_FOUND AND PKGCONFIG_FOUND)
    PKG_SEARCH_MODULE(PC_GLU glu GLU glu32)
    IF ((BUILD_WITH_STATIC STREQUAL "ON") AND PC_GLU_STATIC_FOUND)
        INCLUDE_DIRECTORIES(${PC_GLU_STATIC_INCLUDE_DIRS})
        TARGET_LINK_LIBRARIES(${COLLISION_EXE_NAME} ${PC_GLU_STATIC_LIBRARIES})
        IF (CMAKE_WITH_DEBUG)
            MESSAGE(STATUS "glu found by PC-STATIC mode.")
        ENDIF ()
    ELSEIF (PC_GLU_FOUND)
        INCLUDE_DIRECTORIES(${PC_GLU_INCLUDE_DIRS})
        TARGET_LINK_LIBRARIES(${COLLISION_EXE_NAME} ${PC_GLU_LIBRARIES})
        IF (CMAKE_WITH_DEBUG)
            MESSAGE(STATUS "glu found by PC mode.")
        ENDIF ()
    ENDIF ()
ENDIF ()
IF (NOT HINT_GLU_FOUND AND NOT OPENGL_GLU_FOUND AND NOT PC_GLU_FOUND)
    FIND_PACKAGE(GLU)
    IF (GLU_FOUND)
        INCLUDE_DIRECTORIES(${GLU_INCLUDE_DIR})
        TARGET_LINK_LIBRARIES(${COLLISION_EXE_NAME} ${GLU_LIBRARY})
        IF (CMAKE_WITH_DEBUG)
            MESSAGE(STATUS "glu found by CMAKE mode.")
        ENDIF ()
    ENDIF ()
ENDIF ()
IF (NOT HINT_GLU_FOUND AND NOT OPENGL_GLU_FOUND AND NOT GLU_FOUND AND NOT PC_GLU_FOUND AND NOT PC_GLU_STATIC_FOUND)
    MESSAGE(FATAL_ERROR "Cannot find the glu library.")
ENDIF ()

IF (HINT_GLFW3_FOUND)
    INCLUDE_DIRECTORIES(${HINT_GLFW3_INCLUDE_DIR})
    TARGET_LINK_LIBRARIES(${COLLISION_EXE_NAME} ${HINT_GLFW3_LIBRARY})
    IF (CMAKE_WITH_DEBUG)
        MESSAGE(STATUS "glfw3 found by HINT mode.")
    ENDIF ()
ENDIF ()
IF (NOT HINT_GLFW3_FOUND AND PKGCONFIG_FOUND)
    PKG_SEARCH_MODULE(PC_GLFW3 glfw3 glfw)
    IF ((BUILD_WITH_STATIC STREQUAL "ON") AND PC_GLFW3_STATIC_FOUND)
        INCLUDE_DIRECTORIES(${PC_GLFW3_STATIC_INCLUDE_DIRS})
        TARGET_LINK_LIBRARIES(${COLLISION_EXE_NAME} ${PC_GLFW3_STATIC_LIBRARIES})
        IF (CMAKE_WITH_DEBUG)
            MESSAGE(STATUS "glfw3 found by PC-STATIC mode.")
        ENDIF ()
    ELSEIF (PC_GLFW3_FOUND)
        INCLUDE_DIRECTORIES(${PC_GLFW3_INCLUDE_DIRS})
        TARGET_LINK_LIBRARIES(${COLLISION_EXE_NAME} ${PC_GLFW3_LIBRARIES})
        IF (CMAKE_WITH_DEBUG)
            MESSAGE(STATUS "glfw3 found by PC mode.")
        ENDIF ()
    ENDIF ()
ENDIF ()
IF (NOT HINT_GLFW3_FOUND AND NOT PC_GLFW3_FOUND)
    FIND_PACKAGE(GLFW3)
    IF (GLFW3_FOUND)
        SET(GLFW_BUILD_DOCS OFF CACHE BOOL "" FORCE)
        SET(GLFW_BUILD_TESTS OFF CACHE BOOL "" FORCE)
        SET(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)
        TARGET_LINK_LIBRARIES(${COLLISION_EXE_NAME} glfw)
        IF (CMAKE_WITH_DEBUG)
            MESSAGE(STATUS "glfw3 found by CMAKE mode.")
        ENDIF ()
    ENDIF ()
ENDIF ()
IF (NOT HINT_GLFW3_FOUND AND NOT GLFW3_FOUND AND NOT PC_GLFW3_FOUND AND NOT PC_GLFW3_STATIC_FOUND)
    MESSAGE(FATAL_ERROR "Cannot find the glfw3 library.")
ENDIF ()

IF (HINT_OPENAL_FOUND)
    INCLUDE_DIRECTORIES(${HINT_OPENAL_INCLUDE_DIR})
    TARGET_LINK_LIBRARIES(${COLLISION_EXE_NAME} ${HINT_OPENAL_LIBRARY})
    IF (CMAKE_WITH_DEBUG)
        MESSAGE(STATUS "OpenAL found by HINT mode.")
    ENDIF ()
ENDIF ()
IF (NOT HINT_OPENAL_FOUND AND PKGCONFIG_FOUND)
    PKG_SEARCH_MODULE(PC_OPENAL OpenAL openal)
    IF ((BUILD_WITH_STATIC STREQUAL "ON") AND PC_OPENAL_STATIC_FOUND)
        INCLUDE_DIRECTORIES(${PC_OPENAL_STATIC_INCLUDE_DIRS})
        TARGET_LINK_LIBRARIES(${COLLISION_EXE_NAME} ${PC_OPENAL_STATIC_LIBRARIES})
        IF (CMAKE_WITH_DEBUG)
            MESSAGE(STATUS "OpenAL found by PC-STATIC mode.")
        ENDIF ()
    ELSEIF (PC_OPENAL_FOUND)
        INCLUDE_DIRECTORIES(${PC_OPENAL_INCLUDE_DIRS})
        TARGET_LINK_LIBRARIES(${COLLISION_EXE_NAME} ${PC_OPENAL_LIBRARIES})
        IF (CMAKE_WITH_DEBUG)
            MESSAGE(STATUS "OpenAL found by PC mode.")
        ENDIF ()
    ENDIF ()
ENDIF ()
IF (NOT HINT_OPENAL_FOUND AND NOT PC_OPENAL_FOUND)
    FIND_PACKAGE(OPENAL)
    IF (OPENAL_FOUND)
        INCLUDE_DIRECTORIES(${OPENAL_INCLUDE_DIR})
        TARGET_LINK_LIBRARIES(${COLLISION_EXE_NAME} ${OPENAL_LIBRARY})
        IF (CMAKE_WITH_DEBUG)
            MESSAGE(STATUS "OpenAL found by CMAKE mode.")
        ENDIF ()
    ENDIF ()
ENDIF ()
IF (NOT HINT_OPENAL_FOUND AND NOT OPENAL_FOUND AND NOT PC_OPENAL_FOUND AND NOT PC_OPENAL_STATIC_FOUND)
    MESSAGE(FATAL_ERROR "Cannot find the OpenAL library.")
ENDIF ()

IF (HINT_ALUT_FOUND)
    INCLUDE_DIRECTORIES(${HINT_ALUT_INCLUDE_DIR})
    TARGET_LINK_LIBRARIES(${COLLISION_EXE_NAME} ${HINT_ALUT_LIBRARY})
    IF (CMAKE_WITH_DEBUG)
        MESSAGE(STATUS "alut found by HINT mode.")
    ENDIF ()
ENDIF ()
IF (NOT HINT_ALUT_FOUND AND PKGCONFIG_FOUND)
    PKG_SEARCH_MODULE(PC_ALUT alut alut32 Alut freealut)
    IF ((BUILD_WITH_STATIC STREQUAL "ON") AND PC_ALUT_STATIC_FOUND)
        INCLUDE_DIRECTORIES(${PC_ALUT_STATIC_INCLUDE_DIRS})
        TARGET_LINK_LIBRARIES(${COLLISION_EXE_NAME} ${PC_ALUT_STATIC_LIBRARIES})
        IF (CMAKE_WITH_DEBUG)
            MESSAGE(STATUS "alut found by PC-STATIC mode.")
        ENDIF ()
    ELSEIF (PC_ALUT_FOUND)
        INCLUDE_DIRECTORIES(${PC_ALUT_INCLUDE_DIRS})
        TARGET_LINK_LIBRARIES(${COLLISION_EXE_NAME} ${PC_ALUT_LIBRARIES})
        IF (CMAKE_WITH_DEBUG)
            MESSAGE(STATUS "alut found by PC mode.")
        ENDIF ()
    ENDIF ()
ENDIF ()
IF (NOT HINT_ALUT_FOUND AND NOT PC_ALUT_FOUND)
    FIND_PACKAGE(ALUT)
    IF (ALUT_FOUND)
        INCLUDE_DIRECTORIES(${ALUT_INCLUDE_DIR})
        TARGET_LINK_LIBRARIES(${COLLISION_EXE_NAME} ${ALUT_LIBRARY})
        IF (CMAKE_WITH_DEBUG)
            MESSAGE(STATUS "alut found by CMAKE mode.")
        ENDIF ()
    ENDIF ()
ENDIF ()
IF (NOT HINT_ALUT_FOUND AND NOT ALUT_FOUND AND NOT PC_ALUT_FOUND AND NOT PC_ALUT_STATIC_FOUND)
    MESSAGE(FATAL_ERROR "Cannot find the alut library.")
ENDIF ()

# Add flags for the target

IF (BUILD_WITH_STATIC)
    SET_TARGET_PROPERTIES(${COLLISION_EXE_NAME} PROPERTIES LINK_FLAGS -static)
ENDIF ()

SET_TARGET_PROPERTIES(${COLLISION_EXE_NAME} PROPERTIES COMPILE_FLAGES -O2)

IF (BUILD_WITH_DEBUG)
    SET_TARGET_PROPERTIES(${COLLISION_EXE_NAME} PROPERTIES COMPILE_FLAGES -g)
ENDIF ()

# Do miscellaneous things for the target

IF (BUILD_WITH_DEBUG)
    ADD_DEFINITIONS(-DDEBUG)
ELSE ()
    ADD_DEFINITIONS(-DRELEASE)
ENDIF ()
